{"version":3,"sources":["webpack://treeator/webpack/bootstrap","webpack://treeator/./index.js","webpack://treeator/./src/js sync ^\\.\\/.*\\.js$","webpack://treeator/./src/js/treeator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","pkg","require","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","inMemTree","currentTree","globalOptions","onHoverRow","style","singleClickedRow","dblClickedRow","_addElement","parent","type","element","document","createElement","appendChild","onHoverDefault","tr","backgroundColor","onClickDefault","onDblClickDefault","_containerRenderer","container","margin","fontFamily","height","width","boxSizing","fontSize","overflow","_rowRenderer","row","wordBreak","_cellRenderer","cell","padding","_applyRender","properties","arr","length","prop","assign","_addHighlight","tdElement","filter","innerText","textContent","outerHtml","firstChild","outerHTML","replace","childNodes","innerHTML","RegExp","_getParentsToDisplay","parents","depth","previousDepth","push","_displayParents","x","depthParents","y","display","_getChildren","elem","selector","callback","Element","matches","msMatchesSelector","webkitMatchesSelector","siblings","nextElementSibling","_nextUntil","sibling","siblingDepth","getAttribute","_toggleTreeView","options","tableElement","cnf","collapseIcon","tree","rows","expandIcon","target","parentNode","children","expandnodes","item","classList","contains","childrenCopy","subnode","subnodeDepth","subnodeChildren","child","remove","add","_addRowIcons","tableCell","rowTypeIcons","icon","lookup","file","folder","_iconLookup","ICON_TYPE","color","_addRowEvents","pos","onClick","onDblClick","onHover","onHoverOut","onclick","ondblclick","onmouseover","onmouseout","_addRow","data","renderer","expand","colourCode","DATA_DEPTH","parentRowIndex","elementPosition","rowDepth","_getParentIndex","className","COLOUR_CODE","tableRow","setAttribute","columns","returnValue","cells","tableCellSpan","cursor","textAlign","paddingLeft","alignments","alignment","cellValue","whiteSpace","_addCells","sourceNames","newNode","referenceNode","treeBody","tBodies","insertRow","insertBefore","nextSibling","prepend","_createTreeView","frag","getElementById","removeChild","treeRoot","cellSpacing","tableLayout","columnNames","newColumnNames","newNames","widths","displayNames","treeHeader","th","header","txt","charAt","toUpperCase","substr","toLowerCase","_addHeaders","_addRows","cloneNode","div","searchTable","searchDivId","tableDivId","divId","table","getElementsByTagName","td","found","indexOf","treeElement","oldTree","_addTreeToDom","_getChildrenLength","index","childCount","indexDepth","_removeRow","position","deleteRow","_updateRowToDataModel","rowUpdates","updates","childUpdates","parseInt","update","findStartsWithString","replaceString","startsWith","_updateChildrenProperties","_updateRow","check","htmlUpdates","_setRowDefaultDisplay","column","init","createDocumentFragment","input","_displayTree","search","appendTreeRecords","records","record","rowData","splice","removeTreeRecords","updateTreeRecords","findLastChild","parentPos","parentDepth","getChildren"],"mappings":"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","file":"treeator.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\r\n * npm Entry File\r\n * (c) 2020 Joshua Adams\r\n */\r\n\r\n/**\r\n * index.js is the default 'entry file' for npm.\r\n * This means that any require('package name') or import 'package name'\r\n * statements will refer to this file.\r\n */\r\nconst pkg = require('./package.json');\r\n// export a file with the same name as the package by default\r\nmodule.exports = require(`./src/js/${pkg.name}.js`);","var map = {\n\t\"./treeator.js\": 3\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2;","/*!\r\n * Treeator\r\n * JavaScript component for generating views of tree data structures\r\n * (c) 2020 Joshua Adams\r\n */\r\n\r\n/* ============================== Import Modules ============================ */\r\n\r\n// N/A\r\n\r\n/* ================================ Variables =============================== */\r\n\r\n// variable to store tree fragment to enable searching operations with\r\n// minimised repaints and reflows\r\nlet inMemTree;\r\n// stores the current tree element display so that its state can be tracked\r\nlet currentTree;\r\n// store globalOptions for use in calls to treeator after initial construction\r\nlet globalOptions;\r\n// track user interaction with tree\r\nlet onHoverRow = { style: {} };\r\nlet singleClickedRow = { style: {} };\r\nlet dblClickedRow = { style: {} };\r\n\r\n/* ============================= Private Methods ============================ */\r\n\r\nfunction _handleUndefined(value, returnValue) {\r\n  if (typeof value === 'undefined') {\r\n    return returnValue;\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _toTitleCase(str) {\r\n  return str.replace(/\\w\\S*/g,\r\n    function tc(txt) {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n}\r\n\r\nfunction _addElement(parent, type) {\r\n  const element = document.createElement(type);\r\n  parent.appendChild(element);\r\n  return element;\r\n}\r\n\r\nfunction _deleteElement(id) {\r\n  const e = document.getElementById(id);\r\n  if (e) {\r\n    e.parentNode.removeChild(e);\r\n  }\r\n}\r\n\r\nfunction onHoverDefault(tr) {\r\n  if (onHoverRow !== tr) {\r\n    // clear current styling\r\n    if (onHoverRow !== singleClickedRow) {\r\n      onHoverRow.style.backgroundColor = '';\r\n    }\r\n    // set new row\r\n    onHoverRow = tr;\r\n    if (tr !== singleClickedRow) {\r\n      // set default styling\r\n      tr.style.backgroundColor = 'rgba(206,230,253,1)';\r\n    }\r\n  }\r\n}\r\n\r\nfunction onClickDefault(tr) {\r\n  if (singleClickedRow !== tr) {\r\n    // clear current styling\r\n    singleClickedRow.style.backgroundColor = '';\r\n    // set new row\r\n    singleClickedRow = tr;\r\n    // set default styling\r\n    tr.style.backgroundColor = 'rgba(28,144,243,1)';\r\n  }\r\n}\r\n\r\nfunction onDblClickDefault(tr) {\r\n  if (dblClickedRow !== tr) {\r\n    // set new row\r\n    dblClickedRow = tr;\r\n  }\r\n}\r\n\r\nfunction _containerRenderer() {\r\n  const container = {};\r\n  container.className = 'treeator-tree';\r\n  container.style = {\r\n    'font-family': 'roboto',\r\n    margin: '0px',\r\n    fontFamily: 'roboto',\r\n    height: '100%',\r\n    width: '100%',\r\n    boxSizing: 'border-box',\r\n    fontSize: '13px',\r\n    overflow: 'scroll'\r\n  };\r\n  return container;\r\n}\r\n\r\nfunction _rowRenderer() {\r\n  const row = {};\r\n  row.className = '';\r\n  row.style = {\r\n    wordBreak: 'break-all',\r\n    'font-size': '14px'\r\n  };\r\n  return row;\r\n}\r\n\r\nfunction _cellRenderer() {\r\n  const cell = {};\r\n  cell.className = '';\r\n  cell.style = {\r\n    padding: '5px'\r\n  };\r\n  return cell;\r\n}\r\n\r\nfunction _applyRender(element, properties) {\r\n  const arr = Object.keys(properties);\r\n  for (let i = 0; i < arr.length; i++) {\r\n    const prop = arr[i];\r\n    if (typeof properties[prop] === 'object' && properties[prop] !== null) {\r\n      Object.assign(element[prop], properties[prop]);\r\n    } else {\r\n      element[prop] = properties[prop];\r\n    }\r\n  }\r\n  return element;\r\n}\r\n\r\nfunction _addHighlight(tdElement, filter) {\r\n  let t = (tdElement.innerText || tdElement.textContent);\r\n  // flags... ig\r\n  // i = case insensitive\r\n  // g = global. Search for ALL matches in string\r\n  let outerHtml = '';\r\n  // case 1 - one child element to persist (chevron)\r\n  if (tdElement.firstChild && tdElement.firstChild.outerHTML) {\r\n    // persist html\r\n    outerHtml = tdElement.firstChild.outerHTML;\r\n    // remove child text\r\n    t = t.replace(tdElement.firstChild.innerText, '');\r\n    // case 2 - two child elements to persist\r\n    if (tdElement.childNodes[1] && tdElement.childNodes[1].outerHTML) {\r\n      // persist html\r\n      outerHtml = outerHtml + tdElement.childNodes[1].outerHTML;\r\n      // remove child text\r\n      t = t.replace(tdElement.childNodes[1].innerText, '');\r\n    }\r\n  }\r\n  // case 1 - filter passed\r\n  if (filter !== '') {\r\n    tdElement.innerHTML = outerHtml + t.replace(new RegExp(`(${filter})`, 'ig'), '<span style=\"background-color: yellow;\">$1</span>');\r\n  // case 2 - empty filter therefore remove highlight\r\n  } else {\r\n    tdElement.innerHTML = outerHtml + t;\r\n  }\r\n}\r\n\r\nfunction _getParentsToDisplay(parents, depth, previousDepth, tr) {\r\n  // add level to array\r\n  if (!parents[depth]) {\r\n    parents[depth] = [];\r\n  }\r\n  // case 1 - minimum depth reached - reset parents array\r\n  if (depth === 0) {\r\n    parents = [];\r\n    parents[0] = [];\r\n    parents[0].push(tr);\r\n    // case 2 - depth remains the same\r\n  } else if (depth === previousDepth) {\r\n    // reset current depth level\r\n    parents[depth] = [];\r\n    parents[depth].push(tr);\r\n    // case 3 - depth increased\r\n  } else if (depth > previousDepth) {\r\n    parents[depth].push(tr);\r\n    // case 4 - depth decreased\r\n  } else {\r\n    // clear current depth and lower depths\r\n    for (let i = depth; i < parents.length; i++) {\r\n      parents[i] = [];\r\n    }\r\n    parents[depth].push(tr);\r\n  }\r\n  return parents;\r\n}\r\n\r\nfunction _displayParents(parents) {\r\n  if (parents) {\r\n    for (let x = 0; x < parents.length; x++) {\r\n      const depthParents = parents[x];\r\n      if (depthParents) {\r\n        for (let y = 0; y < depthParents.length; y++) {\r\n          depthParents[y].style.display = '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// get all sibling elements until an element with a particular selector is\r\n// encountered. In this case data-depth = current value.\r\n// elem = element to start search with\r\n// selector = css selector pattern to stop at. e.g. class, div, attribute etc.\r\nfunction _nextUntil(elem, selector, filter, callback) {\r\n  // matches() polyfill\r\n  // normalise behaviour of matches function in older browsers\r\n  if (!Element.prototype.matches) {\r\n    Element.prototype.matches = Element.prototype.msMatchesSelector\r\n      || Element.prototype.webkitMatchesSelector;\r\n  }\r\n  // Setup siblings array\r\n  const siblings = [];\r\n  // Get the next sibling element. Sibling immediately after starting element.\r\n  elem = elem.nextElementSibling;\r\n  // Loop through all sibling elements until no sibling is encountered\r\n  while (elem) {\r\n    // If we've reached our match, bail\r\n    if (elem.matches(selector)) break;\r\n    // If filtering by a selector, check if the sibling matches\r\n    if (filter && !elem.matches(filter)) {\r\n      // move to next element\r\n      elem = elem.nextElementSibling;\r\n      // restart loop\r\n      continue;\r\n    }\r\n    // custom callback selector\r\n    if (callback && !callback(elem)) {\r\n      break;\r\n    }\r\n    // Otherwise, push it to the siblings array\r\n    siblings.push(elem);\r\n    // Get the next sibling element\r\n    elem = elem.nextElementSibling;\r\n  }\r\n  return siblings;\r\n}\r\n\r\nfunction _getChildren(parent, depth) {\r\n  return _nextUntil(parent, null, null, function cb(sibling) {\r\n    // get sibling attribute\r\n    const siblingDepth = sibling.getAttribute('data-depth');\r\n    // confirm within allowable depth\r\n    if (depth < siblingDepth) {\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n}\r\n\r\nfunction _getParentIndex(elementPosition, data, depth) {\r\n  // loop upwards (backwards) through table array\r\n  // need to start at element position - 1 as element position is\r\n  // the position that the new element is to be inserted into\r\n  for (let i = elementPosition - 1; i > -1; i--) {\r\n    const row = data[i];\r\n    let rowDepth;\r\n    // handle case where user attempts to insert row at end of table\r\n    if (row) {\r\n      rowDepth = row.DATA_DEPTH;\r\n    }\r\n    // parent encountered\r\n    if (rowDepth < depth) {\r\n      return i;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _hide(ele) {\r\n  ele.style.display = 'none';\r\n}\r\n\r\nfunction _show(ele) {\r\n  ele.style.display = '';\r\n}\r\n\r\nfunction _toggleTreeView(options, tableElement) {\r\n  const cnf = {\r\n    collapseIcon: options.tree.rows.collapseIcon || '▾',\r\n    expandIcon: options.tree.rows.expandIcon || '▸'\r\n  };\r\n  // get currently clicked element in table\r\n  const target = tableElement.target; // eslint-disable-line prefer-destructuring\r\n  // get parent table row\r\n  const parent = target.parentNode.parentNode;\r\n  // get data depth value\r\n  const depth = parent.getAttribute('data-depth');\r\n  // only attempt to filter elements if a data depth is detected\r\n  if (depth && depth >= 0) {\r\n    // get all siblings until the next sibling with the same depth is\r\n    // reached\r\n    const children = _getChildren(parent, depth);\r\n    // Remove already collapsed nodes from children so that we don't\r\n    // make them visible.\r\n    // (Confused? Remove this code and close Item 2, close Item 1\r\n    // then open Item 1 again, then you will understand)\r\n    // get all children with expand\r\n    const expandnodes = children.filter(function cb(item) {\r\n      return item.classList.contains('treeator-tree--expand');\r\n    });\r\n    let childrenCopy = children;\r\n    // loop through all collapsed rows\r\n    expandnodes.map(function cb(subnode) { // eslint-disable-line array-callback-return\r\n      // get all children of expand items\r\n      const subnodeDepth = subnode.getAttribute('data-depth');\r\n      const subnodeChildren = _getChildren(subnode, subnodeDepth);\r\n      // remove expand items from display list\r\n      childrenCopy = childrenCopy.filter(function cb(child) {\r\n        for (let i = 0; i < subnodeChildren.length; i++) {\r\n          if (subnodeChildren[i] === child) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      });\r\n    });\r\n    // Change icon and hide/show children\r\n    if (target.innerHTML === cnf.collapseIcon) {\r\n      parent.classList.remove('treeator-tree--collapse');\r\n      parent.classList.add('treeator-tree--expand');\r\n      target.innerHTML = cnf.expandIcon;\r\n      // hide all children\r\n      children.map(function cb(e) {\r\n        return _hide(e);\r\n      });\r\n    } else if (target.innerHTML === cnf.expandIcon) {\r\n      // prevents adding chevrons to rows with no children\r\n      parent.classList.remove('treeator-tree--expand');\r\n      parent.classList.add('treeator-tree--collapse');\r\n      target.innerHTML = cnf.collapseIcon;\r\n      // show on specific children\r\n      childrenCopy.map(function cb(e) {\r\n        return _show(e);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction _addTreeToDom(treeElement, divId, tableDivId) {\r\n  // remove old tree\r\n  const oldTree = document.getElementById(tableDivId);\r\n  if (oldTree) {\r\n    oldTree.parentNode.removeChild(oldTree);\r\n  }\r\n  // add new filtered tree\r\n  const parent = document.getElementById(divId);\r\n  parent.appendChild(treeElement);\r\n  // set currentTree in state\r\n  currentTree = treeElement;\r\n}\r\n\r\nfunction _displayTree(treeRoot, divId, searchDivId, options) {\r\n  const div = document.getElementById(divId);\r\n  const input = document.getElementById(searchDivId);\r\n  // add filtered tree if applicable\r\n  if (input && input.value) {\r\n    searchTable(searchDivId, 'treeator-tree', divId, options); // eslint-disable-line no-use-before-define\r\n  } else {\r\n    // add tree to DOM\r\n    div.appendChild(treeRoot);\r\n  }\r\n}\r\n\r\nfunction _addHeaders(options, treeRoot) {\r\n  const columnNames = options.tree.columns.sourceNames;\r\n  const newColumnNames = options.tree.columns.newNames;\r\n  const widths = options.tree.columns.widths;\r\n  const display = options.tree.columns.displayNames || false;\r\n  // add tree view header\r\n  const treeHeader = _addElement(treeRoot, 'thead');\r\n  // add headers to header element\r\n  for (let i = 0; i < columnNames.length; i++) {\r\n    // add header\r\n    const th = _addElement(treeHeader, 'th');\r\n    // calculate values\r\n    const header = _toTitleCase(newColumnNames[i]);\r\n    let width;\r\n    if (widths) {\r\n      width = `${widths[i]}px`;\r\n    }\r\n    // apply header styles\r\n    th.width = width;\r\n    // apply header values\r\n    if (display) {\r\n      th.innerHTML = header;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _fileSystemIconLookup() {\r\n  return {\r\n    file: '&#128459;',\r\n    folder: '&#128447;'\r\n  };\r\n}\r\n\r\nfunction _iconLookup(rowTypeIcons) {\r\n  let lookup = {};\r\n  if (rowTypeIcons === 'filesystem') {\r\n    lookup = _fileSystemIconLookup();\r\n  }\r\n  return lookup;\r\n}\r\n\r\nfunction _addRowIcons(row, tableCell, rowTypeIcons) {\r\n  const icon = _addElement(tableCell, 'span');\r\n  const lookup = _iconLookup(rowTypeIcons);\r\n  icon.innerHTML = lookup[row.ICON_TYPE] || '';\r\n  icon.style.padding = '0px 5px 0px 5px';\r\n  icon.style.color = 'rgba(95,99,104,1)';\r\n}\r\n\r\nfunction _addCells(options, row, columns, tableRow, expand) {\r\n  const cnf = {\r\n    expandIcon: options.tree.rows.expandIcon || '▸',\r\n    rowTypeIcons: options.tree.rows.rowTypeIcons || '',\r\n    renderer: options.tree.cells.renderer || _cellRenderer\r\n  };\r\n  for (let n = 0; n < columns.length; n++) {\r\n    const tableCell = _addElement(tableRow, 'td');\r\n    // add indent or chevron into cell\r\n    if (n === 0) {\r\n      const tableCellSpan = _addElement(tableCell, 'span');\r\n      tableCellSpan.style.height = '18px';\r\n      tableCellSpan.style.width = '18px';\r\n      tableCellSpan.style.display = 'inline-block';\r\n      if (expand === 'treeator-tree--expand') {\r\n        tableCellSpan.style.cursor = 'pointer';\r\n        tableCellSpan.style.textAlign = 'center';\r\n        tableCellSpan.innerHTML = cnf.expandIcon;\r\n      }\r\n      // set tablecell indent\r\n      tableCellSpan.style.paddingLeft = `${row.DATA_DEPTH * 15}px`;\r\n      // add row type icons\r\n      _addRowIcons(row, tableCell, cnf.rowTypeIcons);\r\n      // add toggle function to tree elements\r\n      tableCell.onclick = function cb(e) {\r\n        _toggleTreeView(options, e);\r\n      };\r\n    }\r\n    // determine cell alignments\r\n    const alignments = options.tree.columns.alignment;\r\n    const cellValue = _handleUndefined(row[columns[n]], '');\r\n    // add cell content\r\n    tableCell.innerHTML = tableCell.innerHTML + cellValue;\r\n    tableCell.style.textAlign = alignments[n];\r\n    tableCell.style.whiteSpace = 'nowrap';\r\n    tableCell.style.overflow = 'hidden';\r\n    // apply cell renderer\r\n    const render = cnf.renderer();\r\n    _applyRender(tableCell, render);\r\n  }\r\n}\r\n\r\nfunction _addRowEvents(tr, row, pos, options) {\r\n  const cnf = {\r\n    onClick: options.tree.rows.onClick || onClickDefault,\r\n    onDblClick: options.tree.rows.onDblClick || onDblClickDefault,\r\n    onHover: options.tree.rows.onHover || onHoverDefault,\r\n    onHoverOut: options.tree.rows.onHoverOut || function cb() { }\r\n  };\r\n  tr.onclick = function onclick() {\r\n    return cnf.onClick(tr, row, pos);\r\n  };\r\n  tr.ondblclick = function ondblclick() {\r\n    return cnf.onDblClick(tr, row, pos);\r\n  };\r\n  tr.onmouseover = function onmouseover() {\r\n    return cnf.onHover(tr, row, pos);\r\n  };\r\n  tr.onmouseout = function onmouseout() {\r\n    return cnf.onHoverOut(tr, row, pos);\r\n  };\r\n}\r\n\r\nfunction _insertAfter(newNode, referenceNode) {\r\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n}\r\n\r\nfunction _addRow(options, tree, row, i, data) {\r\n  const cnf = {\r\n    renderer: options.tree.rows.renderer || _rowRenderer\r\n  };\r\n  let expand = '';\r\n  let display = 'none';\r\n  let colourCode = '';\r\n  // confirm if row element has children\r\n  if (i < data.length - 1) {\r\n    if (row.DATA_DEPTH < (data[i + 1]).DATA_DEPTH) {\r\n      expand = 'treeator-tree--expand';\r\n    }\r\n  }\r\n  // confirm if row should be displayed\r\n  // case 1 - initial construction of tree view\r\n  if (row.DATA_DEPTH === 0) {\r\n    display = '';\r\n    // case 2 - tree already constructed - check parent display status\r\n  } else if (currentTree && i !== 0) {\r\n    // get parent of current element\r\n    const parentRowIndex = _getParentIndex(i, data, row.DATA_DEPTH);\r\n    // check display status of parent\r\n    if (tree.rows[parentRowIndex].className !== 'treeator-tree--expand') {\r\n      display = '';\r\n    }\r\n  }\r\n  // confirm if row should be coloured\r\n  if (row.COLOUR_CODE) {\r\n    colourCode = `rgba(${row.COLOUR_CODE})`;\r\n  }\r\n  // create table row\r\n  const tableRow = document.createElement('tr');\r\n  // apply styling to row\r\n  tableRow.setAttribute('data-depth', row.DATA_DEPTH);\r\n  tableRow.style.display = display;\r\n  tableRow.style.backgroundColor = colourCode;\r\n  const render = cnf.renderer();\r\n  _applyRender(tableRow, render);\r\n  // must occur after the renderer to prevent the class name being overwritten\r\n  tableRow.className = expand;\r\n  // apply row functionality\r\n  _addRowEvents(tableRow, row, i, options);\r\n  // add cells to row\r\n  _addCells(options, row, options.tree.columns.sourceNames, tableRow, expand);\r\n  // append table row to tree body\r\n  const rows = tree.rows;\r\n  const treeBody = tree.tBodies[0];\r\n  // get row at desired insert position\r\n  const insertRow = rows.item(i - 1);\r\n  // case 1 - new table being constructed\r\n  if (!insertRow) {\r\n    // prepend puts element at first position in children array\r\n    treeBody.prepend(tableRow);\r\n    // case 2 - table already exists\r\n  } else {\r\n    // insert new row at specified location\r\n    _insertAfter(tableRow, insertRow);\r\n    // insertRow.parentNode.insertAfter(tableRow, insertRow);\r\n  }\r\n}\r\n\r\nfunction _addRows(options, tree) {\r\n  const data = options.tree.data;\r\n  // add rows to table\r\n  for (let i = 0; i < data.length; i++) {\r\n    const row = data[i];\r\n    _addRow(options, tree, row, i, data);\r\n  }\r\n}\r\n\r\n/**\r\n * createTreeView - generate a view of a tree datastructure based on config\r\n * options passed\r\n */\r\nfunction _createTreeView(options, frag) {\r\n  // delete dynamic tree element if it already exists\r\n  _deleteElement('treeator-tree');\r\n  // create new dynamic tree element\r\n  // cellspacing 0 to support IE6 and IE7 - Removes unwanted whitespace between\r\n  // table cells\r\n  const treeRoot = _addElement(frag, 'table');\r\n  treeRoot.id = 'treeator-tree';\r\n  treeRoot.cellSpacing = '0';\r\n  treeRoot.style.tableLayout = 'fixed';\r\n  // add headers to tree\r\n  _addHeaders(options, treeRoot);\r\n  // add table body\r\n  _addElement(treeRoot, 'tbody');\r\n  // add table rows\r\n  _addRows(options, treeRoot);\r\n  // copy tree root to global variable\r\n  inMemTree = treeRoot.cloneNode(true);\r\n  // apply styling to tree view container\r\n  const cnf = { renderer: options.tree.renderer || _containerRenderer };\r\n  const container = document.getElementById(options.tree.div);\r\n  const render = cnf.renderer();\r\n  _applyRender(container, render);\r\n  return treeRoot;\r\n}\r\n\r\n/* ============================== Public Methods ============================ */\r\n\r\nfunction searchTable(searchDivId, tableDivId, divId, options) {\r\n  // Declare variables\r\n  const input = document.getElementById(searchDivId);\r\n  const filter = input.value.toUpperCase();\r\n  // create copy of tree to filter and reload into dom\r\n  const table = inMemTree.cloneNode(true);\r\n  const tr = table.getElementsByTagName('tr');\r\n  let parents = [];\r\n  let previousDepth = -1;\r\n  // Only search through table if a input value is provided\r\n  if (filter) {\r\n    // Loop through all table rows, and hide those who don't match the search query\r\n    for (let i = 0; i < tr.length; i++) {\r\n      // track parent elements of current row\r\n      const depth = tr[i].getAttribute('data-depth');\r\n      parents = _getParentsToDisplay(parents, depth, previousDepth, tr[i]);\r\n      // get all table cells\r\n      const td = tr[i].getElementsByTagName('td');\r\n      // loop through all table cells\r\n      let found = false;\r\n      for (let n = 0; n < td.length; n++) {\r\n        const text = (td[n].innerText || td[n].textContent);\r\n        if (text.toUpperCase().indexOf(filter) > -1) {\r\n          found = true;\r\n          _addHighlight(td[n], filter);\r\n        }\r\n      }\r\n      // set display of table row\r\n      if (found) {\r\n        tr[i].style.display = '';\r\n        // fix chevron status to allow drilling down\r\n        tr[i].classList.remove('treeator-tree--collapse');\r\n        tr[i].classList.add('treeator-tree--expand');\r\n        // display parent elements\r\n        _displayParents(parents);\r\n      } else {\r\n        tr[i].style.display = 'none';\r\n      }\r\n      // re-add double click to newly cloned tree\r\n      _addRowEvents(tr[i], options.tree.data[i], i, options);\r\n      previousDepth = depth;\r\n    }\r\n  } else {\r\n    // No input value therefore dont attempt to filter\r\n    // add row events and objects to table\r\n    for (let i = 0; i < tr.length; i++) {\r\n      _addRowEvents(tr[i], options.tree.data[i], i, options);\r\n    }\r\n  }\r\n  // add toggle function to tree elements\r\n  table.onclick = function toggle(e) {\r\n    _toggleTreeView(options, e);\r\n  };\r\n  // replace existing tree view with filtered tree view\r\n  _addTreeToDom(table, divId, tableDivId);\r\n}\r\n\r\nfunction _addRowToDataModel(data, row) {\r\n  const position = row.position;\r\n  const rowData = row.data;\r\n  data.splice(position, 0, rowData);\r\n}\r\n\r\nfunction _getChildrenLength(data, index) {\r\n  let childCount = 0;\r\n  const indexDepth = data[index].DATA_DEPTH;\r\n  // loop through data from from index child to end of data set\r\n  for (let i = index + 1; i < data.length; i++) {\r\n    const rowDepth = data[i].DATA_DEPTH;\r\n    // confirm if row is a child\r\n    if (rowDepth > indexDepth) {\r\n      childCount++;\r\n    } else {\r\n      // exit for loop\r\n      break;\r\n    }\r\n  }\r\n  return childCount;\r\n}\r\n\r\nfunction _removeRowFromDataModel(data, row) {\r\n  const position = row.position;\r\n  const length = _getChildrenLength(data, position);\r\n  data.splice(position, length + 1);\r\n}\r\n\r\nfunction _removeRow(tableElement, data, row) {\r\n  const position = row.position;\r\n  const length = _getChildrenLength(data, position);\r\n  // remove elements and children from dom\r\n  for (let i = 0; i < length + 1; i++) {\r\n    // need to delete from bottom to top to ensure refrernce remain correct\r\n    tableElement.deleteRow(position + length - i);\r\n  }\r\n}\r\n\r\n// records = [{\r\n//   position: position in tree to insert\r\n//   data: row of data to insert at position\r\n// }]\r\nfunction appendTreeRecords(records) {\r\n  // loop through all records\r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    // append elements to in memory dom\r\n    _addRow(globalOptions, inMemTree, record.data, record.position, globalOptions.tree.data);\r\n    // append elements to displayed dom\r\n    _addRow(globalOptions, currentTree, record.data, record.position, globalOptions.tree.data);\r\n    // append records to in memory dom model\r\n    _addRowToDataModel(globalOptions.tree.data, record);\r\n  }\r\n}\r\n\r\n// records are expected in top to bottom order\r\n// records = [{\r\n//   position: position in tree to remove\r\n// }]\r\nfunction removeTreeRecords(records) {\r\n  // loop through all records\r\n  for (let i = records.length - 1; i > -1; i--) {\r\n    const record = records[i];\r\n    // remove elements from in memory dom\r\n    _removeRow(inMemTree, globalOptions.tree.data, record);\r\n    // remove elements from displayed dom\r\n    _removeRow(currentTree, globalOptions.tree.data, record);\r\n    // remove records from in memory dom model\r\n    _removeRowFromDataModel(globalOptions.tree.data, record);\r\n  }\r\n}\r\n\r\nfunction _updateChildrenProperties(data, index, childUpdates) {\r\n  const indexDepth = data[index].DATA_DEPTH;\r\n  const start = parseInt(index);\r\n  // loop through data from from index child to end of data set\r\n  for (let i = start + 1; i < data.length; i++) {\r\n    const row = data[i];\r\n    const rowDepth = row.DATA_DEPTH;\r\n    // confirm if row is a child\r\n    if (rowDepth > indexDepth) {\r\n      // loop through all updates for each child\r\n      for (let n = 0; n < childUpdates.length; n++) {\r\n        // get current update\r\n        const update = childUpdates[n];\r\n        const property = update.property;\r\n        const findStartsWithString = update.findStartsWithString;\r\n        const replaceString = update.replaceString;\r\n        if (row[property].startsWith(findStartsWithString)) {\r\n          // update directory\r\n          row[property] = (row[property]).replace(findStartsWithString, replaceString);\r\n        }\r\n      }\r\n    } else {\r\n      // exit for loop\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _updateRowToDataModel(data, row) {\r\n  const rowUpdates = row.updates;\r\n  const position = row.position;\r\n  const childUpdates = row.childUpdates;\r\n  // update record in tree\r\n  if (rowUpdates) {\r\n    for (let i = 0; i < rowUpdates.length; i++) {\r\n      const property = rowUpdates[i].property;\r\n      const value = rowUpdates[i].value;\r\n      data[position][property] = value;\r\n    }\r\n  }\r\n  // update record children in tree\r\n  if (childUpdates) {\r\n    _updateChildrenProperties(data, position, childUpdates);\r\n  }\r\n}\r\n\r\nfunction _setRowDefaultDisplay(check, tr, position) {\r\n  if (check === true) {\r\n    const data = globalOptions.tree.data[position];\r\n    if (data.DATA_DEPTH !== 0) {\r\n      tr.style.display = 'none';\r\n    }\r\n  }\r\n}\r\n\r\nfunction _updateRow(tableElement, row, check) {\r\n  const updates = row.htmlUpdates;\r\n  if (updates) {\r\n    const position = row.position;\r\n    const tr = tableElement.rows[position];\r\n    // update default display status of row\r\n    _setRowDefaultDisplay(check, tr, position);\r\n    for (let i = 0; i < updates.length; i++) {\r\n      const update = updates[i];\r\n      const column = update.column;\r\n      const value = update.value;\r\n      const childNodes = tr.cells[column].childNodes;\r\n      // last node always contains text value\r\n      const lastNode = childNodes[childNodes.length - 1];\r\n      lastNode.data = value;\r\n    }\r\n  }\r\n}\r\n\r\n// records = [{\r\n//   position: position of item to update,\r\n//   updates: [{property: \"propertyName\", value: \"value\"}, ...],\r\n//   childUpdates: [{property: \"FILE_PATH\", findStartsWithString: \"old_dir\",\r\n//                 replaceString: \"new_dir\"}],\r\n//   htmlUpdates: [{property: \"propertyName\", value: \"value\"}, ...]\r\n// }]\r\nfunction updateTreeRecords(records) {\r\n  // loop through all records\r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    // append elements to in memory dom\r\n    _updateRow(inMemTree, record, true);\r\n    // append elements to displayed dom\r\n    _updateRow(currentTree, record, false);\r\n    // append records to in memory dom model\r\n    _updateRowToDataModel(globalOptions.tree.data, record);\r\n  }\r\n}\r\n\r\nfunction findLastChild(parentPos, data) {\r\n  if (!data) {\r\n    data = globalOptions.tree.data;\r\n  }\r\n  const parent = data[parentPos];\r\n  const parentDepth = parent.DATA_DEPTH;\r\n  const startPos = parentPos + 1;\r\n  let childCount = 0;\r\n  for (let i = startPos; i < data.length; i++) {\r\n    const row = data[i];\r\n    const rowDepth = row.DATA_DEPTH;\r\n    if (parentDepth < rowDepth) {\r\n      // case 1 - child record\r\n      childCount++;\r\n    } else if (rowDepth <= parentDepth) {\r\n      // case 2 - sibling or parent encountered - end of children\r\n      if (childCount !== 0) {\r\n        return i - 1;\r\n      } else {\r\n        // handle case that parent has no children\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n  // case 3 - end of dataset\r\n  return data.length - 1;\r\n}\r\n\r\nfunction getChildren(parentPos, data) {\r\n  if (!data) {\r\n    data = globalOptions.tree.data;\r\n  }\r\n  const parent = data[parentPos];\r\n  const parentDepth = parent.DATA_DEPTH;\r\n  const children = [];\r\n  for (let i = parentPos + 1; i < data.length; i++) {\r\n    const row = data[i];\r\n    const rowDepth = row.DATA_DEPTH;\r\n    // case 1 - child found\r\n    if (rowDepth === parentDepth + 1) {\r\n      children.push(data[i]);\r\n    // case 2 - no more children to be found\r\n    } else if (rowDepth <= parentDepth) {\r\n      break;\r\n    }\r\n  }\r\n  return children;\r\n}\r\n\r\nfunction init(options) {\r\n  // create in-memory fragment to store tree DOM elements - limits DOM to one repaint\r\n  const frag = document.createDocumentFragment();\r\n  // add tree container element\r\n  const tree = _createTreeView(options, frag);\r\n  // save tree to memory\r\n  currentTree = tree;\r\n  // save options to memory\r\n  globalOptions = options;\r\n  // display to user\r\n  _displayTree(tree, options.tree.div, options.search.div, options);\r\n}\r\n\r\n/* =========================== Export Public APIs =========================== */\r\n\r\nmodule.exports = {\r\n  init,\r\n  searchTable,\r\n  appendTreeRecords,\r\n  onHoverDefault,\r\n  onClickDefault,\r\n  onDblClickDefault,\r\n  removeTreeRecords,\r\n  updateTreeRecords,\r\n  findLastChild,\r\n  getChildren\r\n};\r\n"],"sourceRoot":""}